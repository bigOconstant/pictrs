FROM rustembedded/cross:arm-unknown-linux-gnueabihf AS arm32v7-builder

ARG UID=991
ARG GID=991

ENV TOOLCHAIN=stable
ENV HOST=arm-unknown-linux
ENV TARGET=$HOST-gnueabihf
ENV TOOL=arm-linux-gnueabihf
ENV ARCH=armhf

RUN \
 apt-get update && \
 apt-get upgrade -y

RUN \
 addgroup --gid "${GID}" build && \
 adduser \
    --disabled-password \
    --gecos "" \
    --ingroup build \
    --uid "${UID}" \
    --home /opt/build \
    build

ADD https://sh.rustup.rs /opt/build/rustup.sh

RUN \
 chown -R build:build /opt/build

USER build
WORKDIR /opt/build

ENV PATH=$PATH:/opt/build/.cargo/bin

RUN \
 chmod +x rustup.sh && \
 ./rustup.sh --default-toolchain $TOOLCHAIN --profile minimal -y && \
 rustup target add $TARGET

FROM arm32v7-builder as builder

USER root

ADD https://imagemagick.org/download/ImageMagick.tar.gz ./

RUN \
 dpkg --add-architecture $ARCH && \
 apt-get update && \
 apt-get -y install \
    libgexiv2-dev:$ARCH \
    libltdl-dev:$ARCH \
    libjpeg-dev:$ARCH \
    libpng-dev:$ARCH \
    libwebp-dev:$ARCH \
    libxml2-dev:$ARCH \
    liblzma-dev:$ARCH \
    libexpat1-dev:$ARCH && \
 ln -s /usr/lib/$TOOL/libpcre.so /usr/lib/$TOOL/libpcre.so.3 && \
 ln -s /usr/lib/$TOOL/libz.so /usr/lib/$TOOL/libz.so.1 && \
 ln -s /usr/lib/$TOOL/libexpatw.so /usr/lib/$TOOL/libexpat.so.1 && \
 chown build:build ImageMagick.tar.gz


USER build
ENV USER=build

ENV PKG_CONFIG_ALLOW_CROSS=1
ENV PKG_CONFIG_PATH=/usr/lib/$TOOL/pkgconfig:/usr/lib/$PKGCONFIG
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/$TOOL
ENV LD_RUN_PATH=$LD_RUN_PATH:/usr/lib/$TOOL:/usr/lib
ENV LDFLAGS="$LDFLAGS -L/usr/lib/$TOOL -Wl,-rpath-link,/usr/lib/$TOOL"
ENV CPPFLAGS="$CPPFLAGS -I/usr/include -I/usr/include/$TOOL"

RUN \
 tar xzf ImageMagick.tar.gz && \
 mv ImageMagick-* ImageMagick

WORKDIR /opt/build/ImageMagick

RUN \
 ./configure \
     CC=$TOOL-gcc \
     CXX=$TOOL-g++ \
     --prefix=/imagemagick \
     --disable-docs \
     --with-modules \
     --enable-shared \
     --disable-static \
     --without-perl \
     --with-xml=yes \
     --with-png=yes \
     --with-jpeg=yes \
     --with-webp=yes \
     --host=$HOST && \
 make

USER root

RUN \
 make install && \
 ldconfig /imagemagick/lib

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/imagemagick/lib
ENV LD_RUN_PATH=$LD_RUN_PATH:/imagemagick/lib
ENV LDFLAGS="$LDFLAGS -L/imagemagick/lib"
ENV RUSTFLAGS="-L/usr/lib/$TOOL -C link-arg=-Wl,-rpath-link,/usr/lib/$TOOL"
ENV IMAGE_MAGICK_DIR=/imagemagick

USER build

ARG TAG=master
ARG REPOSITORY=https://git.asonix.dog/asonix/pict-rs
ARG BINARY=pict-rs

RUN \
 git clone -b $TAG $REPOSITORY repo

WORKDIR /opt/build/repo

RUN \
 cargo build --release --target $TARGET && \
 $TOOL-strip target/$TARGET/release/$BINARY

FROM arm32v7/ubuntu:20.04

ARG UID=991
ARG GID=991
ARG BINARY=pict-rs

COPY --from=builder /opt/build/repo/target/arm-unknown-linux-gnueabihf/release/$BINARY /usr/bin/$BINARY

RUN \
 apt-get update && \
 apt-get -y upgrade && \
 apt-get -y install tini libgexiv2-2 && \
 addgroup --gid $GID pictrs && \
 adduser \
    --disabled-password \
    --gecos "" \
    --ingroup pictrs \
    --uid $UID \
    --home /opt/pictrs \
    pictrs

RUN \
 chown -R pictrs:pictrs /mnt

VOLUME /mnt
WORKDIR /opt/pictrs
USER pictrs
ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["/usr/bin/pict-rs", "-p", "/mnt", "-a", "0.0.0.0:8080", "-w", "thumbnail"]
